package com.javalec.ex;

// import java.sql.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

public class MemberDAO {
	private Connection conn = null;
	private Statement stmt = null;
	private ResultSet rs = null;
	private PreparedStatement pstmt = null;

	private DataSource ds = null;

	private static MemberDAO instance = new MemberDAO();

	public static MemberDAO getInstance() {
		if (instance == null)
			instance = new MemberDAO();
		return instance;
	}

	public MemberDAO() {
		try {
			Context ctx = new InitialContext();
			ds = (DataSource) ctx.lookup("java:comp/env/jdbc/mysql");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public int memberInsert(MemberDTO m) {
		int result = 0;
		conn = null;
		pstmt = null;
		try {
			conn = ds.getConnection();
			String sql = "insert into memberDTO values(" + "?,?,?)";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, m.getId());
			// 단순 평문인 경우
			// pstmt.setNString(2, m.getPw());

			// password 암호화
			PasswordEncoder p = new BCryptPasswordEncoder();
			m.setPw(m.getPw());
			pstmt.setString(2, m.getPw());
			pstmt.setString(3, m.getName());
			result = pstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				pstmt.close();
				conn.close();
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}

		return result;
	}

}
